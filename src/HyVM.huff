// SPDX-License-Identifier: Unlicence

/// @title HyVM
/// @notice Run arbitrary code on the EVM
/// @dev This version uses the "no-verifier" abstraction, but "contract-verifier" can be used.

#include "Pointer.huff"
#include "Jump-table.huff"
#include "./abstracts/no-verifier.huff"

/* -------------------------------------------------------------------------- */
/*                                  FALLBACK                                  */
/* -------------------------------------------------------------------------- */

/// @notice Entry point of the HyVM
#define macro MAIN() = takes(0) returns (0) {
    // init memory by storing a word just before the host memory start
    // so msize will return 0
    0x0 0x20 [HOST_MEMORY_START] sub mstore

    INIT_JUMPTABLE()
    CONTINUE()

    /* ----------------------------- notimplemented ----------------------------- */

    notimplemented:

    /* ---------------------------------- STOP ---------------------------------- */

    op_stop:
        stop
        CONTINUE()

    /* ----------------------------------- ADD ---------------------------------- */

    op_add:
        add
        CONTINUE()

    /* ----------------------------------- MUL ---------------------------------- */

    op_mul:
        mul
        CONTINUE()

    /* ----------------------------------- SUB ---------------------------------- */

    op_sub:
        sub
        CONTINUE()

    /* ----------------------------------- DIV ---------------------------------- */

    op_div:
        div
        CONTINUE()

    /* ---------------------------------- SDIV ---------------------------------- */

    op_sdiv:
        sdiv
        CONTINUE()

    /* ----------------------------------- MOD ---------------------------------- */

    op_mod:
        mod
        CONTINUE()

    /* ---------------------------------- SMOD ---------------------------------- */

    op_smod:
        smod
        CONTINUE()

    /* --------------------------------- ADDMOD --------------------------------- */

    op_addmod:
        addmod
        CONTINUE()

    /* --------------------------------- MULMOD --------------------------------- */
    
    op_mulmod:
        mulmod
        CONTINUE()

    /* ----------------------------------- EXP ---------------------------------- */

    op_exp:
        exp
        CONTINUE()

    /* ------------------------------- SIGNEXTEND ------------------------------- */

    op_signextend:
        signextend
        CONTINUE()

    /* ----------------------------------- LT ----------------------------------- */

    op_lt:
        lt
        CONTINUE()

    /* ----------------------------------- GT ----------------------------------- */

    op_gt:
        gt
        CONTINUE()

    /* ----------------------------------- SLT ---------------------------------- */

    op_slt:
        slt
        CONTINUE()

    /* ----------------------------------- SGT ---------------------------------- */

    op_sgt:
        sgt
        CONTINUE()

    /* ----------------------------------- EQ ----------------------------------- */

    op_eq:
        eq
        CONTINUE()

    /* --------------------------------- ISZERO --------------------------------- */

    op_iszero:
        iszero
        CONTINUE()

    /* ----------------------------------- AND ---------------------------------- */

    op_and:
        and
        CONTINUE()

    /* ----------------------------------- OR ----------------------------------- */

    op_or:
        or
        CONTINUE()

    /* ----------------------------------- XOR ---------------------------------- */

    op_xor:
        xor
        CONTINUE()

    /* ----------------------------------- NOT ---------------------------------- */

    op_not:
        not
        CONTINUE()

    /* ---------------------------------- BYTE ---------------------------------- */

    op_byte:
        byte
        CONTINUE()
        
    /* ----------------------------------- SHL ---------------------------------- */

    op_shl:
        shl
        CONTINUE()

    /* ----------------------------------- SHR ---------------------------------- */

    op_shr:
        shr
        CONTINUE()

    /* ----------------------------------- SAR ---------------------------------- */

    op_sar:
        sar
        CONTINUE()

    /* ---------------------------------- SHA3 ---------------------------------- */

    op_sha3:
        // [offset, size]

        // fix offset
        FIX_MEMOFFSET()

        sha3
        CONTINUE()

    /* --------------------------------- ADDRESS -------------------------------- */

    op_address:
        address
        CONTINUE()
    
    /* --------------------------------- BALANCE -------------------------------- */

    op_balance:
        balance
        CONTINUE()

    /* --------------------------------- ORIGIN --------------------------------- */

    op_origin:
        origin
        CONTINUE()

    /* --------------------------------- CALLER --------------------------------- */

    op_caller:
        caller
        CONTINUE()

    /* -------------------------------- CALLVALUE ------------------------------- */

    op_callvalue:
        callvalue
        CONTINUE()

    /* ------------------------------ CALLDATALOAD ------------------------------ */

    op_calldataload:
        // getting calldata is not supported in a vm => load a 0

        pop //  remove the index to load (we dont care)
        0x00 // push 0 as the loaded value

        CONTINUE()

    /* ------------------------------ CALLDATASIZE ------------------------------ */

    op_calldatasize:
        // no call data
        0x0
        CONTINUE()

    /* ------------------------------ CALLDATACOPY ------------------------------ */

    op_calldatacopy:
        // [destOffset, offest, size]

        // fix destOffset
        FIX_MEMOFFSET() // =>  [fixed destOffset, calldataSize, size]

        // getting calldata is not supported in a vm
        //  -> copy zeros (by running calldatacopy with an index which is after the current calldata)

        // fix offset to make it out of bounds
        swap1 // => [offest, destOffset, size]
        pop //  [destOffset, size]
        calldatasize // => [calldataSize, destOffset, size]
        swap1//   => [destOffset, calldataSize, size]

        calldatacopy

        CONTINUE()
        
    /* -------------------------------- CODESIZE -------------------------------- */

    op_codesize:
        // When using the HyVM, the code resides in calldata.
        // Code size is the same as calldata size.
        calldatasize

        CONTINUE()

    /* -------------------------------- CODECOPY -------------------------------- */

    op_codecopy:
        // [destOffset, offset, size]

        // fix destOffset
        FIX_MEMOFFSET()

        // when using HyVM, the code resides in calldata
        //  => codecopy is a really a calldatacopy
        calldatacopy

        CONTINUE()

    /* -------------------------------- GASPRICE -------------------------------- */

    op_gasprice:
        gasprice
        CONTINUE()

    /* ------------------------------- EXTCODESIZE ------------------------------ */

    op_extcodesize:
        extcodesize
        CONTINUE()

    /* ------------------------------- EXTCODECOPY ------------------------------ */

    op_extcodecopy:
        // [address, destOffset, offset, size]

        // fix destOffset
        swap1
        FIX_MEMOFFSET()
        swap1

        extcodecopy
        CONTINUE()

    /* ----------------------------- RETURNDATASIZE ----------------------------- */

    op_returndatasize:
        returndatasize
        CONTINUE()

    /* ----------------------------- RETURNDATACOPY ----------------------------- */

    op_returndatacopy:
        // [destOffset, offset, size]

        // fix destOffset
        FIX_MEMOFFSET()

        returndatacopy
        CONTINUE()

    /* ------------------------------- EXTCODEHASH ------------------------------ */

    op_extcodehash:
        extcodehash
        CONTINUE()

    /* -------------------------------- BLOCKHASH ------------------------------- */

    op_blockhash:
        blockhash
        CONTINUE()

    /* -------------------------------- COINBASE -------------------------------- */

    op_coinbase:
        coinbase
        CONTINUE()

    /* -------------------------------- TIMESTAMP ------------------------------- */

    op_timestamp:
        timestamp
        CONTINUE()

    /* --------------------------------- NUMBER --------------------------------- */

    op_number:
        number
        CONTINUE()

    /* ------------------------------- DIFFICULTY ------------------------------- */

    op_difficulty:
        difficulty
        CONTINUE()

    /* -------------------------------- GASLIMIT -------------------------------- */

    op_gaslimit:
        gaslimit
        CONTINUE()

    /* --------------------------------- CHAINID -------------------------------- */

    op_chainid:
        chainid
        CONTINUE()

    /* ------------------------------- SELFBALANCE ------------------------------ */

    op_selfbalance:
        selfbalance
        CONTINUE()

    /* --------------------------------- BASEFEE -------------------------------- */

    op_basefee:
        basefee
        CONTINUE()

    /* ----------------------------------- POP ---------------------------------- */

    op_pop:
        pop
        CONTINUE()

    /* ---------------------------------- MLOAD --------------------------------- */

    op_mload:
        // fix the memory offset load from, and execute
        FIX_MEMOFFSET()
        mload

        CONTINUE()

    /* --------------------------------- MSTORE --------------------------------- */

    op_mstore:
        // fix the memory offset to store at, and execute
        FIX_MEMOFFSET()
        mstore

        CONTINUE()

    /* --------------------------------- MSTORE8 -------------------------------- */

    op_mstore8:
        // fix the memory offset to store at, and execute
        FIX_MEMOFFSET()
        mstore8

        CONTINUE()

    /* ---------------------------------- SLOAD --------------------------------- */

    op_sload:
        sload
        CONTINUE()

    /* --------------------------------- SSTORE --------------------------------- */

    op_sstore:
        // check can store things here
        CHECK_SSTORE()
        sstore
        CONTINUE()

    /* ---------------------------------- JUMP ---------------------------------- */
    
    op_jump:
        // [jumpTo]
        // move pointer to location
        GOTO_AND_ADVANCE() // => [opcode]

        // check that the current opcode is a jumpdest
        0x5B eq iszero op_jump_fail jumpi

        CONTINUE()

        op_jump_fail:
            0x00 0x00 revert

    /* ---------------------------------- JUMPI --------------------------------- */

    op_jumpi:
        // [jumpTo, condition]
        swap1 // get the condition on top => [condition, jumpTo]
        op_jump jumpi // goto jump if condition is ok, with [jumpTo] as stack
        pop // remove [jumpTo] from stack
        CONTINUE() // otherwise, continue

    /* ----------------------------------- PC ----------------------------------- */

    op_pc:
        // load pointer, but it has advanced => remove 1
        0x1
        [EXEC_POINTER_MSLOT] mload
        sub

        CONTINUE()

    /* ---------------------------------- MSIZE --------------------------------- */

    op_msize:
        // get hypervisor's reserved memory size
        0x0
        FIX_MEMOFFSET()

        // fixed memory
        msize
        sub

        CONTINUE()

    /* ----------------------------------- GAS ---------------------------------- */

    op_gas:
        gas
        CONTINUE()
    
    /* -------------------------------- JUMPDEST -------------------------------- */

    op_jumpdest:
        // do nothing
        CONTINUE()

    
    /* ----------------------------- PUSH1 -> PUSH32 ---------------------------- */

    op_push1:
        0x01
        PICK_DATA()
        CONTINUE()
    op_push2:
        0x02
        PICK_DATA()
        CONTINUE()
    op_push3:
        0x03
        PICK_DATA()
        CONTINUE()
    op_push4:
        0x04
        PICK_DATA()
        CONTINUE()
    op_push5:
        0x05
        PICK_DATA()
        CONTINUE()
    op_push6:
        0x06
        PICK_DATA()
        CONTINUE()
    op_push7:
        0x07
        PICK_DATA()
        CONTINUE()
    op_push8:
        0x08
        PICK_DATA()
        CONTINUE()
    op_push9:
        0x09
        PICK_DATA()
        CONTINUE()
    op_push10:
        0x0a
        PICK_DATA()
        CONTINUE()
    op_push11:
        0x0b
        PICK_DATA()
        CONTINUE()
    op_push12:
        0x0c
        PICK_DATA()
        CONTINUE()
    op_push13:
        0x0d
        PICK_DATA()
        CONTINUE()
    op_push14:
        0x0e
        PICK_DATA()
        CONTINUE()
    op_push15:
        0x0f
        PICK_DATA()
        CONTINUE()
    op_push16:
        0x10
        PICK_DATA()
        CONTINUE()
    op_push17:
        0x11
        PICK_DATA()
        CONTINUE()
    op_push18:
        0x12
        PICK_DATA()
        CONTINUE()
    op_push19:
        0x13
        PICK_DATA()
        CONTINUE()
    op_push20:
        0x14
        PICK_DATA()
        CONTINUE()
    op_push21:
        0x15
        PICK_DATA()
        CONTINUE()
    op_push22:
        0x16
        PICK_DATA()
        CONTINUE()
    op_push23:
        0x17
        PICK_DATA()
        CONTINUE()
    op_push24:
        0x18
        PICK_DATA()
        CONTINUE()
    op_push25:
        0x19
        PICK_DATA()
        CONTINUE()
    op_push26:
        0x1a
        PICK_DATA()
        CONTINUE()
    op_push27:
        0x1b
        PICK_DATA()
        CONTINUE()
    op_push28:
        0x1c
        PICK_DATA()
        CONTINUE()
    op_push29:
        0x1d
        PICK_DATA()
        CONTINUE()
    op_push30:
        0x1e
        PICK_DATA()
        CONTINUE()
    op_push31:
        0x1f
        PICK_DATA()
        CONTINUE()
    op_push32:
        0x20
        PICK_DATA()
        CONTINUE()
    
    /* ------------------------------ DUP1 -> DUP16 ----------------------------- */

    op_dup1:
        dup1
        CONTINUE()
    op_dup2:
        dup2
        CONTINUE()
    op_dup3:
        dup3
        CONTINUE()
    op_dup4:
        dup4
        CONTINUE()
    op_dup5:
        dup5
        CONTINUE()
    op_dup6:
        dup6
        CONTINUE()
    op_dup7:
        dup7
        CONTINUE()
    op_dup8:
        dup8
        CONTINUE()
    op_dup9:
        dup9
        CONTINUE()
    op_dup10:
        dup10
        CONTINUE()
    op_dup11:
        dup11
        CONTINUE()
    op_dup12:
        dup12
        CONTINUE()
    op_dup13:
        dup13
        CONTINUE()
    op_dup14:
        dup14
        CONTINUE()
    op_dup15:
        dup15
        CONTINUE()
    op_dup16:
        dup16
        CONTINUE()

    /* ----------------------------- SWAP1 -> SWAP16 ---------------------------- */

    op_swap1:
        swap1
        CONTINUE()
    op_swap2:
        swap2
        CONTINUE()
    op_swap3:
        swap3
        CONTINUE()
    op_swap4:
        swap4
        CONTINUE()
    op_swap5:
        swap5
        CONTINUE()
    op_swap6:
        swap6
        CONTINUE()
    op_swap7:
        swap7
        CONTINUE()
    op_swap8:
        swap8
        CONTINUE()
    op_swap9:
        swap9
        CONTINUE()
    op_swap10:
        swap10
        CONTINUE()
    op_swap11:
        swap11
        CONTINUE()
    op_swap12:
        swap12
        CONTINUE()
    op_swap13:
        swap13
        CONTINUE()
    op_swap14:
        swap14
        CONTINUE()
    op_swap15:
        swap15
        CONTINUE()
    op_swap16:
        swap16
        CONTINUE()

    /* ------------------------------ LOG0 -> LOG4 ------------------------------ */

    op_log0:
        FIX_MEMOFFSET()
        log0
        CONTINUE()
    op_log1:
        FIX_MEMOFFSET()
        log1
        CONTINUE()
    op_log2:
        FIX_MEMOFFSET()
        log2
        CONTINUE()
    op_log3:
        FIX_MEMOFFSET()
        log3
        CONTINUE()
    op_log4:
        FIX_MEMOFFSET()
        log4
        CONTINUE()

    /* --------------------------------- CREATE --------------------------------- */

    op_create:
        swap1
        FIX_MEMOFFSET()
        swap1
        create
        CONTINUE()

    /* ---------------------------------- CALL ---------------------------------- */

    op_call:
        // on host stack, we have [gas address value argsOffset argsSize retOffset retSize]
        // - fix argsOffset
        swap3
        FIX_MEMOFFSET()
        swap3

        // - fix retOffset
        swap5
        FIX_MEMOFFSET()
        swap5

        // - check can call
        CHECK_CALL()


        call
        CONTINUE()

    /* -------------------------------- CALLCODE -------------------------------- */

    op_callcode:

        // on host stack, we have [gas address value argsOffset argsSize retOffset retSize]
        // - fix argsOffset
        swap3
        FIX_MEMOFFSET()
        swap3

        // - fix retOffset
        swap5
        FIX_MEMOFFSET()
        swap5

        // - check can call
        CHECK_CALLCODE()

        callcode
        CONTINUE()

    /* --------------------------------- RETURN --------------------------------- */
    
    op_return:

        // fix the memory offset to return
        FIX_MEMOFFSET()

        // execute return
        return

    /* ------------------------------ DELEGATECALL ------------------------------ */

    op_delegatecall:
        // on host stack, we have [gas address argsOffset argsSize retOffset retSize]
        // - fix argsOffset
        swap2
        FIX_MEMOFFSET()
        swap2

        // - fix retOffset
        swap4
        FIX_MEMOFFSET()
        swap4

        // - check can call
        CHECK_DELEGATECALL()

        delegatecall
        CONTINUE()

    /* --------------------------------- CREATE2 -------------------------------- */

    op_create2:
        swap1
        FIX_MEMOFFSET()
        swap1
        create2
        CONTINUE()

    /* ------------------------------- STATICCALL ------------------------------- */

    op_staticcall:
        // on host stack, we have [gas address argsOffset argsSize retOffset retSize]
        // - fix argsOffset
        swap2
        FIX_MEMOFFSET()
        swap2

        // - fix retOffset
        swap4
        FIX_MEMOFFSET()
        swap4

        // - check can call
        CHECK_STATICCALL()

        staticcall
        CONTINUE()

    /* --------------------------------- REVERT --------------------------------- */

    op_revert:
        FIX_MEMOFFSET()
        revert
        CONTINUE()

    /* --------------------------------- INVALID -------------------------------- */

    op_invalid:
        invalid
        CONTINUE()

    /* ------------------------------ SELFDESTRUCT ------------------------------ */

    selfdestruct:
        // SELFDESTRUCT is not supported by HyVM, for obvious reasons...
        0x00 0x00 revert

    /* --------------------------------- UNUSED --------------------------------- */

    unused:
        0x00 0x00 revert
}

/* -------------------------------------------------------------------------- */
/*                                   MACROS                                   */
/* -------------------------------------------------------------------------- */

/// @dev Move the pointer to the next instruction
#define macro CONTINUE() = takes(0) returns (1) {
    // load the instruction located at this execution pointer
    [EXEC_POINTER_MSLOT] mload

    GOTO_AND_ADVANCE() // => [opcode]

    // jump to the operation given on stack
    JUMP_TO_OPCODE()
}